import { GoogleAnalytics, GoogleTagManager } from '@next/third-parties/google';
import { Inter } from 'next/font/google';
import { cookies, headers } from 'next/headers';
import { ToastContainer } from 'react-toastify';
import UAParser from 'ua-parser-js';
import { getChatSocketRoomsId } from '@/lib/apis/serverApis/chatApi';
import {
  getInstructorProfile,
  getMyProfile,
} from '@/lib/apis/serverApis/userApi';
import NaverMapsProviders from '@/lib/provider/NaverMapsProviders';
import NprogressBarProvider from '@/lib/provider/NprogressBarProvider';
import ReactQueryProviders from '@/lib/provider/ReactQueryProviders';
import { convertToProfileInfo } from '@/utils/apiDataProcessor';
import ChatModal from './_components/chat/ChatModal';
import ControlOptions from './_components/ControlOptions';
import FirebaseInitializer from './_components/FirebaseInitializer';
import Footer from './_components/Footer';
import Header from './_components/Header/Header';
import UserProfileLinks from './_components/Header/UserProfileLinks';
import UserStoreInitializer from './_components/Header/UserStoreInitializer';
import MobileNav from './_components/MobileNav';
import PWAInstallPrompt from './_components/PWAInstallPrompt';
import SocketInitializer from './_components/SocketInitializer';
import { profileInfo, userType } from '@/types/auth';
import type { Metadata } from 'next';
import 'react-toastify/dist/ReactToastify.css';
import '../styles/toastify.css';
import '../styles/globals.css';

const inter = Inter({ subsets: ['latin'] });

export const metadata: Metadata = {
  title: 'Connection',
  description: 'Generated by Connection',
};

export default async function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  const cookieStore = cookies();
  const user = cookieStore.get('userAccessToken')?.value;
  const lecturer = cookieStore.get('lecturerAccessToken')?.value;
  const deviceToken = cookieStore.get('deviceToken')?.value;
  let authUser: profileInfo | null = null;
  let userType: userType | null = null;
  let socketRooms: string[] | null = null;

  const { get } = headers();
  const ua = get('user-agent');

  const device = new UAParser(ua || '').getDevice();

  try {
    if (user) {
      const userProfile = await getMyProfile();
      authUser = convertToProfileInfo(userProfile);
      userType = 'user';
    }

    if (lecturer) {
      const instructorProfile = await getInstructorProfile();
      authUser = convertToProfileInfo(instructorProfile);
      userType = 'lecturer';
    }

    if (authUser) {
      socketRooms = await getChatSocketRoomsId(authUser.id);
    }
  } catch (error) {
    if (error instanceof Error) {
      console.error(error.message);
    }
  }

  return (
    <html lang="ko">
      <head>
        <link rel="manifest" href="/manifest.json" />
      </head>
      <body
        className={`${inter.className} mx-auto flex min-h-screen max-w-desktop flex-col`}
      >
        <ReactQueryProviders>
          <UserStoreInitializer
            authUser={authUser}
            userType={userType}
            isMobile={device.type === 'mobile' || device.type === 'tablet'}
          />
          <SocketInitializer
            userType={userType}
            userId={authUser?.id}
            rooms={socketRooms}
          />
          {userType && (
            <FirebaseInitializer
              deviceToken={deviceToken}
              userType={userType}
            />
          )}
          <Header>
            <UserProfileLinks
              authUser={authUser}
              userType={userType}
              isMobile={device.type === 'mobile' || device.type === 'tablet'}
            />
          </Header>
          <ChatModal />
          <ToastContainer
            position="top-center"
            autoClose={3000}
            hideProgressBar={false}
            newestOnTop={false}
            closeOnClick
            rtl={false}
            pauseOnFocusLoss
            draggable
            pauseOnHover
            theme="light"
          />
          <NaverMapsProviders>
            <NprogressBarProvider>
              {children}
              <PWAInstallPrompt
                isMobile={device.type === 'mobile' || device.type === 'tablet'}
              />
            </NprogressBarProvider>
          </NaverMapsProviders>
          <ControlOptions />
          <Footer />
          <MobileNav />
        </ReactQueryProviders>
        <GoogleAnalytics gaId="G-JSWE2TFJ10" />
        <GoogleTagManager gtmId="GTM-WV6RNCC9" />
      </body>
    </html>
  );
}
